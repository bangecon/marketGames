ylim(c(-2, 2)) +
theme_void() +
geom_text(hjust = 1, vjust = c(0.5, 0, 1), nudge_x = -0.1) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 0, y = 0, xend = 1, yend = 1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = 1, xend = 2, yend = 1.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = 1, xend = 2, yend = 0.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 0, y = 0, xend = 1, yend = -1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = -1, xend = 2, yend = -1.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = -1, xend = 2, yend = -0.5)) +
geom_text(aes(x = c(2, 2, 2, 2), y = c(1.5, 0.5, -0.5, -1.5), label = c("(Collude, Collude)", "(Collude, Defect)", "(Defect, Collude)", "(Defect, Defect)")))
nodes <- data.frame(label = c("Player 1", "Player 2", "Player 2", "(Collude-Collude)", "(Collude-Defect)", "(Defect-Collude)", "(Defect-Defect)"), x = c(0, 1, 1, 2, 2, 2, 2), y = c(0, 1, -1, 1.5, 0.5, -0.5, -1.5, 1.5, 0.5, -0.5, -1.5))
nodes <- data.frame(label = c("Player 1", "Player 2", "Player 2", "(Collude-Collude)", "(Collude-Defect)", "(Defect-Collude)", "(Defect-Defect)"), x = c(0, 1, 1, 2, 2, 2, 2), y = c(0, 1, -1, 1.5, 0.5, -0.5, -1.5))
nodes <- data.frame(label = c("Leader", "Follower", "Follower", "(Collude-Collude)", "(Collude-Defect)", "(Defect-Collude)", "(Defect-Defect)"), x = c(0, 1, 1, 2, 2, 2, 2), y = c(0, 1, -1, 1.5, 0.5, -0.5, -1.5))
ggplot(data = nodes, mapping = aes(x = x, y = y, label = label)) +
geom_point() +
xlim(c(-0.5, 2.5)) +
ylim(c(-2, 2)) +
theme_void() +
geom_text(hjust = c(1, 1, 1, 0, 0, 0, 0), vjust = c(0.5, 0, 1, 0, 0, 0, 0), nudge_x = c(-0.1, -0.1, -0.1, 0.1, 0.1, 0.1, 0.1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 0, y = 0, xend = 1, yend = 1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = 1, xend = 2, yend = 1.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = 1, xend = 2, yend = 0.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 0, y = 0, xend = 1, yend = -1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = -1, xend = 2, yend = -1.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = -1, xend = 2, yend = -0.5))
ggplot(data = nodes, mapping = aes(x = x, y = y, label = label)) +
geom_point() +
xlim(c(-0, 3)) +
ylim(c(-2, 2)) +
theme_void() +
geom_text(hjust = c(1, 1, 1, 0, 0, 0, 0), vjust = c(0.5, 0, 1, 0, 0, 0, 0), nudge_x = c(-0.1, -0.1, -0.1, 0.1, 0.1, 0.1, 0.1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 0, y = 0, xend = 1, yend = 1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = 1, xend = 2, yend = 1.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = 1, xend = 2, yend = 0.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 0, y = 0, xend = 1, yend = -1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = -1, xend = 2, yend = -1.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = -1, xend = 2, yend = -0.5))
ggplot(data = nodes, mapping = aes(x = x, y = y, label = label)) +
geom_point() +
xlim(c(-0.5, 3)) +
ylim(c(-2, 2)) +
theme_void() +
geom_text(hjust = c(1, 1, 1, 0, 0, 0, 0), vjust = c(0.5, 0, 1, 0, 0, 0, 0), nudge_x = c(-0.1, -0.1, -0.1, 0.1, 0.1, 0.1, 0.1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 0, y = 0, xend = 1, yend = 1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = 1, xend = 2, yend = 1.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = 1, xend = 2, yend = 0.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 0, y = 0, xend = 1, yend = -1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = -1, xend = 2, yend = -1.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = -1, xend = 2, yend = -0.5))
ggplot(data = nodes, mapping = aes(x = x, y = y, label = label)) +
geom_point() +
xlim(c(-0.5, 3)) +
ylim(c(-2, 2)) +
theme_void() +
geom_text(hjust = c(1, 1, 1, 0, 0, 0, 0), vjust = c(0.5, 0, 1, 0.5, 0.5, 0.5, 0.5), nudge_x = c(-0.1, -0.1, -0.1, 0.1, 0.1, 0.1, 0.1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 0, y = 0, xend = 1, yend = 1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = 1, xend = 2, yend = 1.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = 1, xend = 2, yend = 0.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 0, y = 0, xend = 1, yend = -1)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = -1, xend = 2, yend = -1.5)) +
geom_segment(arrow = arrow(length = unit(0.30, "cm"), type = "closed"), aes(x = 1, y = -1, xend = 2, yend = -0.5))
# Set up the Google Sheets, read responses, and initialize output objects.
results <- read_sheet(sheet)
if(a <= 0) stop("The intercept of the demand function needs to be positive.")
if(b >= 0) stop("Demand curves are downward-sloping!")
if(c <= 0) stop("There ain't no such thing as a free lunch (TANSTAAFL)!")
if(f <  0) stop("Fixed costs must be non-negative.")
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results, list(First.Name = "John", Last.Name = "Doe"))
results$First.Name <- str_to_title(results$First.Name)
results$Last.Name <- str_to_title(results$Last.Name)
results$Partner.First.Name <-
str_to_title(results$Partner.First.Name)
results$Partner.Last.Name <-
str_to_title(results$Partner.Last.Name)
partnerResults <- results[, which(names(results) %in% c("Partner.First.Name", "Partner.Last.Name", "Round", "Role", "Strategy"))]
colnames(partnerResults)[5] <- "Partner.Strategy"
results <- merge(
results,
partnerResults,
all = TRUE,
by.x = c("First.Name", "Last.Name", "Round"),
by.y = c("Partner.First.Name", "Partner.Last.Name", "Round"),
suffixes = c("", ".Partner")
)
q.monopoly = (a - c)/(-2*b)
qi.c = q.monopoly/2
ql.d = (a - c)/(-2*b)
qf.dc = (a - c)/(-2*b) - qi.collude/2 # if ql = ql.collude
qf.dd = (a - c)/(-2*b) - ql.defect/2  # if ql = ql.defect
price <- function(x) a + b*(x[1] + x[2])
p.cc <- price(qi.c, qi.c)
p.cd <- price(qi.c, qf.cd)
p.dc <- price(ql.d, qi.c)
p.dd <- price(ql.d, qf.dd)
profit <- function(x) (price(x) - c)*x - f
leaderResults <- subset(results, Role == "Leader")
followerResults <- subset(results, Role == "Follower")
leaderResults <- within(leaderResults, {
Q.Student <- ifelse(Strategy == "Collude", qi.c, ql.d)
Q.Partner <- ifelse(Partner.Strategy == "Collude", qi.c,
ifelse(Strategy == "Collude", qf.dc, qf.dd))
Price <- price(c(Q.Student, Q.Partner))
Profit <- profit(c(Q.Student, Q.Partner))[1]
})
followerResults <- within(followerResults, {
Q.Partner <- ifelse(Partner.Strategy == "Collude", qi.c, ql.d)
Q.Student <- ifelse(Strategy == "Collude", qi.c,
ifelse(Partner.Strategy == "Collude", qf.dc, qf.dd))
Price <- price(c(Q.Student, Q.Partner))
Profit <- profit(c(Q.Student, Q.Partner))[1]
})
Payoffs <- c(profit(c(qi.c, qi.c)), profit(c(qi.c, qf.dc)), profit(c(ql.d, qi.c)), profit(c(ql.d, qf.dd)))
library(googlesheets4)
library(tidyr)
library(stringr)
# Set up the Google Sheets, read responses, and initialize output objects.
results <- read_sheet(sheet)
if(a <= 0) stop("The intercept of the demand function needs to be positive.")
if(b >= 0) stop("Demand curves are downward-sloping!")
if(c <= 0) stop("There ain't no such thing as a free lunch (TANSTAAFL)!")
if(f <  0) stop("Fixed costs must be non-negative.")
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results, list(First.Name = "John", Last.Name = "Doe"))
results$First.Name <- str_to_title(results$First.Name)
results$Last.Name <- str_to_title(results$Last.Name)
results$Partner.First.Name <-
str_to_title(results$Partner.First.Name)
results$Partner.Last.Name <-
str_to_title(results$Partner.Last.Name)
partnerResults <- results[, which(names(results) %in% c("Partner.First.Name", "Partner.Last.Name", "Round", "Role", "Strategy"))]
colnames(partnerResults)[5] <- "Partner.Strategy"
results <- merge(
results,
partnerResults,
all = TRUE,
by.x = c("First.Name", "Last.Name", "Round"),
by.y = c("Partner.First.Name", "Partner.Last.Name", "Round"),
suffixes = c("", ".Partner")
)
q.monopoly = (a - c)/(-2*b)
qi.c = q.monopoly/2
ql.d = (a - c)/(-2*b)
qf.dc = (a - c)/(-2*b) - qi.collude/2 # if ql = ql.collude
qf.dd = (a - c)/(-2*b) - ql.defect/2  # if ql = ql.defect
price <- function(x) a + b*(x[1] + x[2])
p.cc <- price(qi.c, qi.c)
p.cd <- price(qi.c, qf.cd)
p.dc <- price(ql.d, qi.c)
p.dd <- price(ql.d, qf.dd)
profit <- function(x) (price(x) - c)*x - f
leaderResults <- subset(results, Role == "Leader")
followerResults <- subset(results, Role == "Follower")
leaderResults <- within(leaderResults, {
Q.Student <- ifelse(Strategy == "Collude", qi.c, ql.d)
Q.Partner <- ifelse(Partner.Strategy == "Collude", qi.c,
ifelse(Strategy == "Collude", qf.dc, qf.dd))
Price <- price(c(Q.Student, Q.Partner))
Profit <- profit(c(Q.Student, Q.Partner))[1]
})
followerResults <- within(followerResults, {
Q.Partner <- ifelse(Partner.Strategy == "Collude", qi.c, ql.d)
Q.Student <- ifelse(Strategy == "Collude", qi.c,
ifelse(Partner.Strategy == "Collude", qf.dc, qf.dd))
Price <- price(c(Q.Student, Q.Partner))
Profit <- profit(c(Q.Student, Q.Partner))[1]
})
Payoffs <- c(profit(c(qi.c, qi.c)), profit(c(qi.c, qf.dc)), profit(c(ql.d, qi.c)), profit(c(ql.d, qf.dd)))
setwd('c:/Users/jb0616165/Downloads')
rbibutils::bibConvert('examples.bib', 'expamples.xml', informat = 'bibtex', outformat = 'word')
setwd('d:/Google Drive')
library(wooldridge)
library(systemfit)
library(AER)
data(mroz, package='wooldridge')
oursample <- subset(mroz,!is.na(wage))
# 2SLS regressions
summary( ivreg(hours~log(wage)+educ+age+kidslt6+nwifeinc
|educ+age+kidslt6+nwifeinc+exper+I(exper^2), data=oursample))
summary( ivreg(log(wage)~hours+educ+exper+I(exper^2)
|educ+age+kidslt6+nwifeinc+exper+I(exper^2), data=oursample))
# Define system of equations and instruments
eq.hrs   <- hours    ~ log(wage)+educ+age+kidslt6+nwifeinc
eq.wage  <- log(wage)~ hours    +educ+exper+I(exper^2)
eq.system<- list(eq.hrs, eq.wage)
instrum  <- ~educ+age+kidslt6+nwifeinc+exper+I(exper^2)
# 2SLS of whole system (run Example-16-5-systemfit-prep.R first!)
summary(systemfit(eq.system,inst=instrum,data=oursample,method="2SLS"))
# 3SLS of whole system (run Example-16-5-systemfit-prep.R first!)
summary(systemfit(eq.system,inst=instrum,data=oursample,method="3SLS"))
library(dplyr)
library(stargazer)
#we create a toy data frame
pikachu <- data.frame(
employed=c(0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,0),
highiq=c(1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,1,0),
income=set.seed(6)%>%
c(rnorm(25,mean = 600,sd=400)))
#and run a probit regression
reg01 <- glm(employed ~ income + highiq,
family = binomial(link="probit"),
data = pikachu)
#next we estimate the marginal effects
ProbitScalar <- mean(dnorm(predict(reg01, type = "link")))
meffects <- ProbitScalar * coef(reg01)
#then we report the marg. effects
stargazer(meffects, type = "text")
#desired result's form:
stargazer(reg01, type = "text")
tattoo <- read.table("https://ndownloader.figshare.com/files/6920972",
header=TRUE, na.strings=c("unk", "NA"))
library(mlogit)
Tat<-mlogit.data(tattoo, varying=NULL, shape="wide", choice="size", id.var="date")
ml.Tat<-mlogit(size~1|age+sex+yy, Tat, reflevel="small", id.var="date")
library(stargazer)
OR.vector<-exp(ml.Tat$coef)
CI.vector<-exp(confint(ml.Tat))
p.values<-summary(ml.Tat)$CoefTable[,4]
#table with odds ratios and confidence intervals
stargazer(ml.Tat, coef=list(OR.vector), ci=TRUE, ci.custom=list(CI.vector), single.row=T, type="text", star.cutoffs=c(0.05,0.01,0.001), out="table1.txt", digits=4)
#table with coefficients and standard errors
stargazer(ml.Tat, type="text", single.row=TRUE, star.cutoffs=c(0.05,0.01,0.001), out="table1.txt", digits=4)
install.packages("mlogit", dependencies = FALSE)
tattoo <- read.table("https://ndownloader.figshare.com/files/6920972",
header=TRUE, na.strings=c("unk", "NA"))
library(mlogit)
Tat<-mlogit.data(tattoo, varying=NULL, shape="wide", choice="size", id.var="date")
ml.Tat<-mlogit(size~1|age+sex+yy, Tat, reflevel="small", id.var="date")
library(stargazer)
OR.vector<-exp(ml.Tat$coef)
CI.vector<-exp(confint(ml.Tat))
p.values<-summary(ml.Tat)$CoefTable[,4]
#table with odds ratios and confidence intervals
stargazer(ml.Tat, coef=list(OR.vector), ci=TRUE, ci.custom=list(CI.vector), single.row=T, type="text", star.cutoffs=c(0.05,0.01,0.001), out="table1.txt", digits=4)
#table with coefficients and standard errors
stargazer(ml.Tat, type="text", single.row=TRUE, star.cutoffs=c(0.05,0.01,0.001), out="table1.txt", digits=4)
install.packages("dfidx", dependencies = FALSE)
tattoo <- read.table("https://ndownloader.figshare.com/files/6920972",
header=TRUE, na.strings=c("unk", "NA"))
library(mlogit)
Tat<-mlogit.data(tattoo, varying=NULL, shape="wide", choice="size", id.var="date")
ml.Tat<-mlogit(size~1|age+sex+yy, Tat, reflevel="small", id.var="date")
library(stargazer)
OR.vector<-exp(ml.Tat$coef)
CI.vector<-exp(confint(ml.Tat))
p.values<-summary(ml.Tat)$CoefTable[,4]
#table with odds ratios and confidence intervals
stargazer(ml.Tat, coef=list(OR.vector), ci=TRUE, ci.custom=list(CI.vector), single.row=T, type="text", star.cutoffs=c(0.05,0.01,0.001), out="table1.txt", digits=4)
#table with coefficients and standard errors
stargazer(ml.Tat, type="text", single.row=TRUE, star.cutoffs=c(0.05,0.01,0.001), out="table1.txt", digits=4)
tattoo <- read.table("https://ndownloader.figshare.com/files/6920972",
header=TRUE, na.strings=c("unk", "NA"))
library(mlogit)
Tat<-mlogit.data(tattoo, varying=NULL, shape="wide", choice="size", id.var="date")
ml.Tat<-mlogit(size~1|age+sex+yy, Tat, reflevel="small")
library(stargazer)
OR.vector<-exp(ml.Tat$coef)
CI.vector<-exp(confint(ml.Tat))
p.values<-summary(ml.Tat)$CoefTable[,4]
#table with odds ratios and confidence intervals
stargazer(ml.Tat, coef=list(OR.vector), ci=TRUE, ci.custom=list(CI.vector), single.row=T, type="text", star.cutoffs=c(0.05,0.01,0.001), out="table1.txt", digits=4)
#table with coefficients and standard errors
stargazer(ml.Tat, type="text", single.row=TRUE, star.cutoffs=c(0.05,0.01,0.001), out="table1.txt", digits=4)
class(OR.vector)
names(OR.vector)
rownames(summary(ml.Tat))
rownames(summary(ml.Tat)$coefficients)
summary(ml.Tat)
library(stargazer)
OR.vector<-exp(ml.Tat$coef)
CI.vector<-exp(confint(ml.Tat))
p.values<-summary(ml.Tat)$CoefTable[,4]
#table with coefficients and standard errors
stargazer(ml.Tat, type="text", single.row=F, star.cutoffs=c(0.05,0.01,0.001), out="table1.txt", digits=4)
library(stargazer)
OR.vector<-exp(ml.Tat$coef)
CI.vector<-exp(confint(ml.Tat))
p.values<-summary(ml.Tat)$CoefTable[,4] #incorrect # of dimensions, unsure how to determine dimensions
stargazer(ml.Tat, coef=list(OR.vector), ci=TRUE, ci.custom=list(CI.vector), single.row=T, type="text", star.cutoffs=c(0.05,0.01,0.001), out="table1.txt", digits=4) #gives odds ratio (2.5%CI, 97.5%CI)
library(tidyverse)
library(haven)
library(stargazer)
# For this chapter only
library(MatchIt)
library(cem)
library(estimatr)
# read_data function
read_data <- function(df) {
full_path <- paste0("https://raw.github.com/scunning1975/mixtape/master/", df)
return(haven::read_dta(full_path))
}
nsw_dw <- read_data("nsw_mixtape.dta")
mean1 <- nsw_dw %>%
filter(treat == 1) %>%
pull(re78) %>%
mean()
mean0 <- nsw_dw %>%
filter(treat == 0) %>%
pull(re78) %>%
mean()
ate <- unique(mean1 - mean0)
cli::cli_text("The {.emph experimental ATE} estimate is {round(ate,2)}")
# Prepare data for logit
nsw_dw_cpscontrol <- read_data("cps_mixtape.dta") %>%
bind_rows(nsw_dw) %>%
mutate(
agesq = age^2,
agecube = age^3,
educsq = educ*educ,
u74 = case_when(re74 == 0 ~ 1, TRUE ~ 0),
u75 = case_when(re75 == 0 ~ 1, TRUE ~ 0),
interaction1 = educ*re74,
re74sq = re74^2,
re75sq = re75^2,
interaction2 = u74*hisp
)
# estimating propensity score
logit_nsw <- glm(treat ~ age + agesq + agecube + educ + educsq +
marr + nodegree + black + hisp + re74 + re75 + u74 +
u75 + interaction1, family = binomial(link = "logit"),
data = nsw_dw_cpscontrol)
nsw_dw_cpscontrol <- nsw_dw_cpscontrol %>%
mutate(pscore = logit_nsw$fitted.values)
# mean pscore
pscore_control <- nsw_dw_cpscontrol %>%
filter(treat == 0) %>%
pull(pscore) %>%
mean()
pscore_treated <- nsw_dw_cpscontrol %>%
filter(treat == 1) %>%
pull(pscore) %>%
mean()
cli::cli_text("The mean propensity score among the treated group is {round(pscore_treated, 2)} and among the control group is {round(pscore_control, 2)}")
# Untreated pscores
nsw_dw_cpscontrol %>%
filter(treat == 0) %>%
ggplot() +
geom_histogram(aes(x = pscore))
# Treated pscores
nsw_dw_cpscontrol %>%
filter(treat == 1) %>%
ggplot() +
geom_histogram(aes(x = pscore))
#continuation
N <- nrow(nsw_dw_cpscontrol)
# Manual with non-normalized weights using all data
nsw_dw_cpscontrol <- nsw_dw_cpscontrol %>%
mutate(d1 = treat/pscore,
d0 = (1-treat)/(1-pscore))
s1 <- sum(nsw_dw_cpscontrol$d1)
s0 <- sum(nsw_dw_cpscontrol$d0)
nsw_dw_cpscontrol <- nsw_dw_cpscontrol %>%
mutate(y1 = treat * re78/pscore,
y0 = (1-treat) * re78/(1-pscore),
ht = y1 - y0)
te_1 <- nsw_dw_cpscontrol %>%
pull(ht) %>%
mean()
cli::cli_text("Treatment Effect {.emph (non-normalized, all data)}: {round(te_1, 2)}")
# Manual with normalized weights
nsw_dw_cpscontrol <- nsw_dw_cpscontrol %>%
mutate(y1 = (treat*re78/pscore)/(s1/N),
y0 = ((1-treat)*re78/(1-pscore))/(s0/N),
norm = y1 - y0)
te_2 <- nsw_dw_cpscontrol %>%
pull(norm) %>%
mean()
cli::cli_text("Treatment Effect {.emph (normalized, all data)}: {round(te_2, 2)}")
%%R
# Trimming propensity score ---------------
nsw_dw_trimmed <- nsw_dw_cpscontrol %>%
dplyr::select(-d1, -d0, -y1, -y0, -ht, -norm) %>%
filter(!(pscore >= 0.9)) %>%
filter(!(pscore <= 0.1))
N <- nrow(nsw_dw_trimmed)
# Manual with non-normalized weights using trimmed data
nsw_dw_trimmed <- nsw_dw_trimmed %>%
mutate(d1 = treat/pscore,
d0 = (1-treat)/(1-pscore))
s1 <- sum(nsw_dw_trimmed$d1)
s0 <- sum(nsw_dw_trimmed$d0)
nsw_dw_trimmed <- nsw_dw_trimmed %>%
mutate(y1 = treat * re78/pscore,
y0 = (1-treat) * re78/(1-pscore),
ht = y1 - y0)
te_3 <- nsw_dw_trimmed %>%
pull(ht) %>%
mean()
cli::cli_text("Treatment Effect {.emph (non-normalized, trimmed data)}: {round(te_3, 2)}")
%%R
# Manual with normalized weights with trimmed data
nsw_dw_trimmed <- nsw_dw_trimmed %>%
mutate(y1 = (treat*re78/pscore)/(s1/N),
y0 = ((1-treat)*re78/(1-pscore))/(s0/N),
norm = y1 - y0)
te_4 <- nsw_dw_trimmed %>%
pull(norm) %>%
mean()
cli::cli_text("Treatment Effect {.emph (normalized, trimmed data)}: {round(te_4, 2)}")
m_out <- matchit(treat ~ age + agesq + agecube + educ +
educsq + marr + nodegree +
black + hisp + re74 + re75 +
u74 + u75 + interaction1,
data = nsw_dw_cpscontrol,
method = "nearest", min.controls=5)
m_data <- match.data(m_out)
(m_ate <- lm_robust(re78 ~ treat,
data = m_data,
weights = m_data$weights))
m_out <- matchit(treat ~ age + agesq + agecube + educ +
educsq + marr + nodegree +
black + hisp + re74 + re75 +
u74 + u75 + interaction1,
data = nsw_dw_cpscontrol,
method = "cem", min.controls=5)
m_data <- match.data(m_out)
(m_ate <- lm_robust(re78 ~ treat,
data = m_data,
weights = m_data$weights))
m_out <- matchit(treat ~ age + agesq + agecube + educ +
educsq + marr + nodegree +
black + hisp + re74 + re75 +
u74 + u75 + interaction1,
data = nsw_dw_cpscontrol,
method = "mahalanobis", min.controls=5)
m_data <- match.data(m_out)
(m_ate <- lm_robust(re78 ~ treat,
data = m_data,
weights = m_data$weights))
m_out <- matchit(treat ~ age + agesq + agecube + educ +
educsq + marr + nodegree +
black + hisp + re74 + re75 +
u74 + u75 + interaction1,
data = nsw_dw_cpscontrol,
method = "nearest", distance = "mahalanobis", min.controls=5)
m_data <- match.data(m_out)
(m_ate <- lm_robust(re78 ~ treat,
data = m_data,
weights = m_data$weights))
write.csv(nsw_dw_cpscontrol, 'mixtapeMatch.csv')
View(nsw_dw_cpscontrol)
m_out <- matchit(treat ~ age + agesq + agecube + educ +
educsq + marr + nodegree +
black + hisp + re74 + re75 +
u74 + u75 + interaction1,
data = nsw_dw_cpscontrol,
method = "nearest", distance = "mahalanobis", ratio = 1)
m_data <- match.data(m_out)
(m_ate <- lm_robust(re78 ~ treat,
data = m_data,
weights = m_data$weights))
summary(m_out)
summary(m_data)
View(summary(m_data))
(m_ate <- lm_robust(re78 ~ treat,
data = m_data,
weights = m_data$weights))
m_out <- matchit(treat ~ age + agesq + agecube + educ +
educsq + marr + nodegree +
black + hisp + re74 + re75 +
u74 + u75 + interaction1,
exact = ~ marr + nodegree + black + hisp + u74 + u75,
data = nsw_dw_cpscontrol,
method = "nearest", distance = "mahalanobis", ratio = 1)
m_data <- match.data(m_out)
(m_ate <- lm_robust(re78 ~ treat,
data = m_data,
weights = m_data$weights))
summary(m_data)
m_out <- matchit(treat ~ scale(age) + scale(agesq) + scale(agecube) + scale(educ) + scale(educsq) + marr +
nodegree + black + hisp + scale(re74) + scale(re75) + u74 + u75 + scale(interaction1),
exact = ~ marr + nodegree + black + hisp + u74 + u75,
data = nsw_dw_cpscontrol,
method = "nearest", distance = "mahalanobis", ratio = 1)
m_data <- match.data(m_out)
(m_ate <- lm_robust(re78 ~ treat,
data = m_data,
weights = m_data$weights))
summary(m_data)
m_out <- matchit(treat ~ scale(age) + scale(educ) + marr + nodegree + black + hisp +
scale(re74) + scale(re75) + u74 + u75 + scale(interaction1),
exact = ~ marr + nodegree + black + hisp + u74 + u75,
data = nsw_dw_cpscontrol,
method = "nearest", distance = "mahalanobis", ratio = 1)
m_data <- match.data(m_out)
(m_ate <- lm_robust(re78 ~ treat,
data = m_data,
weights = m_data$weights))
summary(m_data)
m_out <- matchit(treat ~ age + educ + marr + nodegree + black + hisp +
re74 + re75 + u74 + u75 + interaction1,
exact = ~ marr + nodegree + black + hisp + u74 + u75,
data = nsw_dw_cpscontrol,
method = "nearest", distance = "mahalanobis", ratio = 1)
m_data <- match.data(m_out)
(m_ate <- lm_robust(re78 ~ treat,
data = m_data,
weights = m_data$weights))
summary(m_data)
summary(nsw_dw_cpscontrol$treat)
table(nsw_dw_cpscontrol$treat)
obj <- 11:15
names(obj)
class(obj)
setwd("D:/Google Drive/Teaching/PrinciplesOfMicro(Spring2022-2) (1)/Activities/econGame")
devtools::document()
runEquilibriumGameApp()
runEquilibriumGameApp()
shiny::runApp()
library(econGame)
