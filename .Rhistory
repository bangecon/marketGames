'Last.Name.2'
results
names
partners
names = NULL
if (is.null(names)) {
names <- list()
if (partners == 'students') {
names <- list(
first = "First.Name",
last = "Last.Name",
partnerFirst = "Partner.First.Name",
partnerLast = "Partner.Last.Name",
round = "Round",
strategy = "Strategy"
)
} else {
names <- list(
first = "First.Name",
last = "Last.Name",
round = "Round",
strategy = "Strategy"
)
}
} else {
names <- lapply(names, make.names)
}
names
results <- as.data.frame(googlesheets4::read_sheet(sheet))
results <- results[,-which(names(results) %in% "Timestamp")]
colnames(results) <- make.names(colnames(results))
results[[c(names$first)]] <- tidyr::replace_na(results[[c(names$first)]], "John")
results[[c(names$last)]] <- tidyr::replace_na(results[[c(names$last)]], "Doe")
results[, c(names$first)] <- ifelse(!is.na(results[, c(names$first)]), results[, c(names$first)], "John")
results[, c(names$last)] <- ifelse(!is.na(results[, c(names$last)]), results[, c(names$last)], "Doe")
colnames(results)[which(colnames(results) == names$first)] <-
'First.Name.1'
colnames(results)[which(colnames(results) == names$last)] <-
'Last.Name.1'
colnames(results)[which(colnames(results) == names$partnerFirst)] <-
'First.Name.2'
colnames(results)[which(colnames(results) == names$partnerLast)] <-
'Last.Name.2'
results
colnames(results)[which(colnames(results) == names$strategy)] <-
'Strategy.1'
partnerResults <-
results[, which(names(results) %in% c('First.Name.2', 'Last.Name.2', 'Round', 'Strategy.1'))]
colnames(partnerResults)[which(colnames(partnerResults) == "Strategy.1")] <-
"Strategy.2"
results
partnerResults
results <- merge(
results,
partnerResults,
all = TRUE,
by.x = c("First.Name.1", "Last.Name.1", "Round"),
by.y = c("First.Name.2", "Last.Name.2", "Round")
)
results
results <- as.data.frame(googlesheets4::read_sheet(sheet))
results
results <- as.data.frame(googlesheets4::read_sheet(sheet))
results <- results[,-which(names(results) %in% "Timestamp")]
colnames(results) <- make.names(colnames(results))
results[[c(names$first)]] <- tidyr::replace_na(results[[c(names$first)]], "John")
results[[c(names$last)]] <- tidyr::replace_na(results[[c(names$last)]], "Doe")
results[, c(names$first)] <- ifelse(!is.na(results[, c(names$first)]), results[, c(names$first)], "John")
results[, c(names$last)] <- ifelse(!is.na(results[, c(names$last)]), results[, c(names$last)], "Doe")
colnames(results)[which(colnames(results) == names$first)] <-
'First.Name.1'
colnames(results)[which(colnames(results) == names$last)] <-
'Last.Name.1'
colnames(results)[which(colnames(results) == names$partnerFirst)] <-
'First.Name.2'
colnames(results)[which(colnames(results) == names$partnerLast)] <-
'Last.Name.2'
colnames(results)[which(colnames(results) == names$strategy)] <-
'Strategy.1'
partnerResults <-
results[, which(names(results) %in% c('First.Name.2', 'Last.Name.2', 'Round', 'Strategy.1'))]
colnames(partnerResults)[which(colnames(partnerResults) == "Strategy.1")] <-
"Strategy.2"
results <- merge(
results,
partnerResults,
all = TRUE,
by.x = c("First.Name.1", "Last.Name.1", "Round"),
by.y = c("First.Name.2", "Last.Name.2", "Round")
)
results
Q.M = (a - c) / (-2 * b)
Q.C = Q.M / 2
Q.D = (a - c) / (-3 * b)
Q.C.off = Q.M / 2
Q.D.off = (a - c + b * Q.C.off) / (-2 * b)
price <- function(x)
a + b * (x[1] + x[2])
results <- within(results, {
Q.Student <- ifelse(
Strategy.2 == "Collude",
ifelse(Strategy.1 == "Collude", Q.C, Q.D.off),
ifelse(Strategy.1 == "Collude", Q.C.off, Q.D)
)
Q.Partner <- ifelse(
Strategy.2 == "Collude",
ifelse(Strategy.1 == "Collude", Q.C, Q.C.off),
ifelse(Strategy.1 == "Collude", Q.D.off, Q.D)
)
Price <- ifelse(
Strategy.2 == "Collude",
ifelse(Strategy.1 == "Collude", price(c(Q.C, Q.C)), price(c(
Q.D.off, Q.C.off
))),
ifelse(Strategy.1 == "Collude", price(c(
Q.D.off, Q.C.off
)), price(c(Q.D, Q.D)))
)
})
results$Profit <- results$Q.Student * (results$Price - c) - f
payoffMatrix <- matrix(c(
paste0("(", round(Q.D * (price(
c(Q.D, Q.D)
) - c) - f, 4), ", ",
round(Q.D * (price(
c(Q.D, Q.D)
) - c) - f, 4), ")"),
paste0("(", round(Q.C.off * (price(
c(Q.C.off, Q.D.off)
) - c) - f, 4), ", ",
round(Q.D.off * (price(
c(Q.C.off, Q.D.off)
) - c) - f, 4), ")"),
paste0("(", round(Q.C.off * (price(
c(Q.C.off, Q.D.off)
) - c) - f, 4), ", ",
round(Q.D.off * (price(
c(Q.C.off, Q.D.off)
) - c) - f, 4), ")"),
paste0("(", round(Q.C * (price(
c(Q.C, Q.C)
) - c) - f, 4), ", ",
round(Q.C * (price(
c(Q.C, Q.C)
) - c) - f, 4), ")")
),
nrow = 2,
ncol = 2)
colnames(payoffMatrix) <-
c("Partner = Defect", "Partner = Collude")
rownames(payoffMatrix) <-
c("Strategy = Defect", "Strategy = Collude")
outputMatrix <- matrix(c(
paste0("(", round(Q.D, 4), ", ", round(Q.D, 4), ")"),
paste0("(", round(Q.C.off, 4), ", ", round(Q.D.off, 4), ")"),
paste0("(", round(Q.D.off, 4), ", ", round(Q.C.off, 4), ")"),
paste0("(", Q.C, ", ", Q.C, ")")
),
nrow = 2,
ncol = 2)
colnames(outputMatrix) <-
c("Partner = Defect", "Partner = Collude")
rownames(outputMatrix) <-
c("Strategy = Defect", "Strategy = Collude")
priceMatrix <- matrix(c(
round(price(c(Q.D, Q.D)), 4),
round(price(c(Q.C.off, Q.D.off)), 4),
round(price(c(Q.C.off, Q.D.off)), 4),
round(price(c(Q.C, Q.C)), 4)
),
nrow = 2,
ncol = 2)
colnames(priceMatrix) <-
c("Partner = Defect", "Partner = Collude")
rownames(priceMatrix) <-
c("Strategy = Defect", "Strategy = Collude")
grades <-
aggregate(Profit ~ First.Name.1 + Last.Name.1,
data = results,
FUN = sum)
colnames(grades) <- c("First Name", "Last Name", "Score")
results$Outcome <-
paste0(results$Strategy.1, "-", results$Strategy.2)
results$Outcome <-
ifelse(results$Outcome == "Collude-Defect",
"Defect-Collude",
results$Outcome)
out <- list(
type = "cournotGame",
payoff = payoffMatrix,
output = outputMatrix,
price = priceMatrix,
results = results[order(results$Last.Name.1,
results$First.Name.1),],
grades = grades[order(grades$`Last Name`, grades$`First Name`), ]
)
class(out) <- c('econGame', class(out))
out
devtools::doc)
devtools::document()
cournotGame(sheet = sheet, partners == 'students', names = NULL)
cournotGame(sheet = '1elXc1NAqmZ71pkCeCYreiyDccWbcbbIr-aeHa1A-C3g', partners == 'random', names = NULL)
rm(list = ls())
ls()
cournotGame(sheet = '1elXc1NAqmZ71pkCeCYreiyDccWbcbbIr-aeHa1A-C3g', partners == 'random', names = NULL)
cournotGame(sheet = '1elXc1NAqmZ71pkCeCYreiyDccWbcbbIr-aeHa1A-C3g', partners = 'random', names = NULL)
runCournotGameApp()
factor(rank(runif(10))/10 < 0.5, labels = c("Leader", "Follower"))
devtools::document()
randomLeaders('1E7JJ8egIKkFUTLdUOSy1tqagfGVRh5iOc2BOrFO3fmA')
sheet = '1E7JJ8egIKkFUTLdUOSy1tqagfGVRh5iOc2BOrFO3fmA'
size = 2
names = NULL
googlesheets4::gs4_deauth()
studentList <- googlesheets4::read_sheet(sheet)
studentList <- as.data.frame(studentList)
colnames(studentList) <- make.names(colnames(studentList))
if (is.null(names)) {
names = list(first = "First.Name",
last = "Last.Name",
round = "Round")
}
studentList
set.seed(seed)
seed = 8675309
set.seed(seed)
colnames(studentList)[which(colnames(studentList) == names$round)] = "Round"
studentList <- studentList %>%
group_by(Round) %>%
mutate(
Role = factor(
rank(runif(nrow(studentList))) / nrow(studentList) < 0.5,
labels = c("Leader", "Follower"))
)
studentList <- studentList %>%
group_by(Round)
studentList %>% group_by(Round) %>% summarise(Round_n = n())
studentList$Round_n <- studentList %>% group_by(Round) %>% summarise(Round_n = n())
summarise(studentList, Round_n = n())
studentList
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n())[,2]
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n())
Round_n
Round_n[,2]
Round_n[,2]  Round_n <- studentList %>%
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n()) %>%
as.data.frame[,2]
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n())
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n()) %>%
as.data.frame
Round_n
studentList <- merge(studentList, Round_n, by = "Round")
studentList
studentList <-
group_by(Round) %>%
mutate(
Role = factor(
rank(Rand) / Round_n  < 0.5,
labels = c("Leader", "Follower"))
)
studentList <- studentList %>%
group_by(Round) %>%
mutate(
Role = factor(
rank(Rand) / Round_n  < 0.5,
labels = c("Leader", "Follower"))
)
googlesheets4::gs4_deauth()
studentList <- googlesheets4::read_sheet(sheet)
studentList <- as.data.frame(studentList)
colnames(studentList) <- make.names(colnames(studentList))
if (is.null(names)) {
names = list(first = "First.Name",
last = "Last.Name",
round = "Round")
}
set.seed(seed)
colnames(studentList)[which(colnames(studentList) == names$round)] = "Round"
studentList$Rand <- runif(nrow(studentList))
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n()) %>%
as.data.frame
studentList <- merge(studentList, Round_n, by = "Round")
studentList
studentList <- studentList %>%
group_by(Round) %>%
mutate(
Role = factor(
rank(Rand) / Round_n  < 0.5,
labels = c("Leader", "Follower"))
)
studentList
googlesheets4::gs4_deauth()
studentList <- googlesheets4::read_sheet(sheet)
studentList <- as.data.frame(studentList)
colnames(studentList) <- make.names(colnames(studentList))
if (is.null(names)) {
names = list(first = "First.Name",
last = "Last.Name",
round = "Round")
}
set.seed(seed)
colnames(studentList)[which(colnames(studentList) == names$round)] = "Round"
studentList$Rand <- runif(nrow(studentList))
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n()) %>%
as.data.frame
studentList <- merge(studentList, Round_n, by = "Round")
studentList <- studentList %>%
group_by(Round) %>%
mutate(
Rank = rank(Rand)
)
studentList
googlesheets4::gs4_deauth()
studentList <- googlesheets4::read_sheet(sheet)
studentList <- as.data.frame(studentList)
colnames(studentList) <- make.names(colnames(studentList))
if (is.null(names)) {
names = list(first = "First.Name",
last = "Last.Name",
round = "Round")
}
set.seed(seed)
colnames(studentList)[which(colnames(studentList) == names$round)] = "Round"
studentList$Rand <- runif(nrow(studentList))
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n()) %>%
as.data.frame
studentList <- merge(studentList, Round_n, by = "Round")
studentList <- studentList %>%
group_by(Round) %>%
mutate(
RankPct = rank(Rand)/Round_n
)
studentList
googlesheets4::gs4_deauth()
studentList <- googlesheets4::read_sheet(sheet)
studentList <- as.data.frame(studentList)
colnames(studentList) <- make.names(colnames(studentList))
if (is.null(names)) {
names = list(first = "First.Name",
last = "Last.Name",
round = "Round")
}
set.seed(seed)
colnames(studentList)[which(colnames(studentList) == names$round)] = "Round"
studentList$Rand <- runif(nrow(studentList))
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n()) %>%
as.data.frame
studentList <- merge(studentList, Round_n, by = "Round")
studentList <- studentList %>%
group_by(Round) %>%
mutate(
Leader = rank(Rand)/Round_n <= 0.5
)
studentList
googlesheets4::gs4_deauth()
studentList <- googlesheets4::read_sheet(sheet)
studentList <- as.data.frame(studentList)
colnames(studentList) <- make.names(colnames(studentList))
if (is.null(names)) {
names = list(first = "First.Name",
last = "Last.Name",
round = "Round")
}
set.seed(seed)
colnames(studentList)[which(colnames(studentList) == names$round)] = "Round"
studentList$Rand <- runif(nrow(studentList))
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n()) %>%
as.data.frame
studentList <- merge(studentList, Round_n, by = "Round")
studentList <- studentList %>%
group_by(Round) %>%
mutate(Leader = factor(rank(Rand) / Round_n <= 0.5,
labels = c("Leader", "Follower")))
studentList
googlesheets4::gs4_deauth()
studentList <- googlesheets4::read_sheet(sheet)
studentList <- as.data.frame(studentList)
colnames(studentList) <- make.names(colnames(studentList))
if (is.null(names)) {
names = list(first = "First.Name",
last = "Last.Name",
round = "Round")
}
set.seed(seed)
colnames(studentList)[which(colnames(studentList) == names$round)] = "Round"
studentList$Rand <- runif(nrow(studentList))
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n()) %>%
as.data.frame
studentList <- merge(studentList, Round_n, by = "Round")
studentList <- studentList %>%
group_by(Round) %>%
mutate(Role = factor(rank(Rand) / Round_n <= 0.5,
labels = c("Leader", "Follower")))
studentList
studentList <-
studentList[order(studentList$Round, studentList$Role),
c(names$round, names$first, names$last, "Leader")]
studentList <-
studentList[order(studentList$Round, studentList$Role),
c(names$round, names$first, names$last, "Role")]
studentList
devtools::doc
devtools::docu
devtools::document()
randomLeaders(sheet = sheet)
studentList <- randomLeaders(sheet = sheet)
studentList
studentList[Role == "Leader", ]
subset(studentList, Role == "Leader")
subset(studentList, Role == "Follower")
out <- cbind(subset(studentList, Role == "Leader"), subset(studentList, Role == "Follower"))
out
out <-
cbind(subset(studentList, Role == "Leader"),
subset(studentList, Role == "Follower")) |>
as.data.frame()
out
googlesheets4::gs4_deauth()
studentList <- googlesheets4::read_sheet(sheet)
studentList <- as.data.frame(studentList)
colnames(studentList) <- make.names(colnames(studentList))
if (is.null(names)) {
names = list(first = "First.Name",
last = "Last.Name",
round = "Round")
}
set.seed(seed)
colnames(studentList)[which(colnames(studentList) == names$round)] = "Round"
studentList$Rand <- runif(nrow(studentList))
Round_n <- studentList %>%
group_by(Round) %>%
summarise(Round_n = n()) %>%
as.data.frame
studentList <- merge(studentList, Round_n, by = "Round")
studentList <- studentList %>%
group_by(Round) %>%
mutate(Role = factor(rank(Rand) / Round_n <= 0.5,
labels = c("Leader", "Follower")))
studentList <- studentList[order(studentList$Round, studentList$Role),
c(names$round, names$first, names$last, "Role")]
out <-
cbind(subset(studentList, Role == "Leader"),
subset(studentList, Role == "Follower")) |>
as.data.frame()
colnames(out) <-
c(
"Round",
"First.Name.1",
"Last.Name.1",
"Role.1",
"Round.2",
"First.Name.2",
"Last.Name.2",
"Role.2"
)
out
devtools::document()
randomLeaders(sheet = sheet)
devtools::document()
randomLeaders(sheet = sheet)
devtools::document()
randomLeaders(sheet = sheet)
colnames(out.wide) <-
c(
"Round",
"First.Name.1",
"Last.Name.1",
"Role.1",
"Round.2",
"First.Name.2",
"Last.Name.2",
"Role.2"
)
randomLeaders(sheet = sheet) ->
out
out
colnames(out$wide) <-
c(
"Round",
"First.Name.1",
"Last.Name.1",
"Role.1",
"Round.2",
"First.Name.2",
"Last.Name.2",
"Role.2"
)
out
devtools::document()
randomLeaders(sheet = sheet)
